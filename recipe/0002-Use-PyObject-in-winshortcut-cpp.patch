diff --git a/menuinst/winshortcut.cpp b/menuinst/winshortcut.cpp
index 229f063..c8700af 100644
--- a/menuinst/winshortcut.cpp
+++ b/menuinst/winshortcut.cpp
@@ -15,6 +15,8 @@
 #include <objbase.h>
 #include <shlobj.h>
 #include <objidl.h>
+#include <propvarutil.h>
+#include <propkey.h>
 #include "resource.h"
 
 #include <stdio.h>
@@ -30,18 +32,24 @@
 
 static PyObject *CreateShortcut(PyObject *self, PyObject *args)
 {
-    Py_UNICODE *path; /* path and filename */
-    Py_UNICODE *description;
-    Py_UNICODE *filename;
+    PyObject *py_path; /* path and filename */
+    wchar_t *path = NULL;
+    PyObject *py_description;
+    wchar_t *description = NULL;
+    PyObject *py_filename;
+    wchar_t *filename = NULL;
 
-    Py_UNICODE *arguments = NULL;
-    Py_UNICODE *iconpath = NULL;
+    PyObject *py_arguments = NULL;
+    PyObject *py_iconpath = NULL;
     int iconindex = 0;
-    Py_UNICODE *workdir = NULL;
+    PyObject *py_workdir = NULL;
+    PyObject *py_app_id = NULL;
 
     IShellLink *pShellLink = NULL;
     IPersistFile *pPersistFile = NULL;
+    IPropertyStore *pPropertyStore = NULL;
 
+    PROPVARIANT pv;
     HRESULT hres;
 
     hres = CoInitialize(NULL);
@@ -51,10 +59,23 @@ static PyObject *CreateShortcut(PyObject *self, PyObject *args)
         goto error;
     }
 
-    if (!PyArg_ParseTuple(args, "uuu|uuui",
-                          &path, &description, &filename,
-                          &arguments, &workdir, &iconpath, &iconindex)) {
-        return NULL;
+    if (!PyArg_ParseTuple(args, "UUU|UUUiU",
+                          &py_path, &py_description, &py_filename,
+                          &py_arguments, &py_workdir, &py_iconpath, &iconindex, &py_app_id)) {
+        goto error;
+    }
+
+    path = PyUnicode_AsWideCharString(py_path, NULL);
+    if (path == NULL) {
+        goto error;
+    }
+    description = PyUnicode_AsWideCharString(py_description, NULL);
+    if (description == NULL) {
+        goto error;
+    }
+    filename = PyUnicode_AsWideCharString(py_filename, NULL);
+    if (filename == NULL) {
+        goto error;
     }
 
     hres = CoCreateInstance(CLSID_ShellLink, NULL,
@@ -89,36 +110,78 @@ static PyObject *CreateShortcut(PyObject *self, PyObject *args)
         goto error;
     }
 
-    if (arguments) {
+    if (py_arguments) {
+        wchar_t *arguments = PyUnicode_AsWideCharString(py_arguments, NULL);
+        if (arguments == NULL) {
+            goto error;
+        }
         hres = pShellLink->SetArguments(arguments);
         if (FAILED(hres)) {
                 PyErr_Format(PyExc_OSError,
                                "SetArguments() error 0x%x", hres);
+                PyMem_Free(arguments);
                 goto error;
         }
+        PyMem_Free(arguments);
     }
 
-    if (iconpath) {
+    if (py_iconpath) {
+        wchar_t *iconpath = PyUnicode_AsWideCharString(py_iconpath, NULL);
+        if (iconpath == NULL) {
+            goto error;
+        }
         hres = pShellLink->SetIconLocation(iconpath, iconindex);
         if (FAILED(hres)) {
                 PyErr_Format(PyExc_OSError,
                                "SetIconLocation() error 0x%x", hres);
+                PyMem_Free(iconpath);
                 goto error;
         }
+        PyMem_Free(iconpath);
     }
 
-    if (workdir) {
+    if (py_workdir) {
+        wchar_t *workdir = PyUnicode_AsWideCharString(py_workdir, NULL);
+        if (workdir == NULL) {
+            goto error;
+        }
         hres = pShellLink->SetWorkingDirectory(workdir);
         if (FAILED(hres)) {
-                PyErr_Format(PyExc_OSError,
-                               "SetWorkingDirectory() error 0x%x", hres);
-                goto error;
+            PyErr_Format(PyExc_OSError,
+                            "SetWorkingDirectory() error 0x%x", hres);
+            PyMem_Free(workdir);
+            goto error;
         }
+        PyMem_Free(workdir);
+    }
+
+    if (py_app_id) {
+        wchar_t *app_id = PyUnicode_AsWideCharString(py_app_id, NULL);
+        if (app_id == NULL) {
+            goto error;
+        }
+        hres = pShellLink->QueryInterface(IID_PPV_ARGS(&pPropertyStore));
+        if (FAILED(hres)) {
+            PyErr_Format(PyExc_OSError,
+                           "QueryInterface(IPropertyStore) error 0x%x", hres);
+            goto error;
+        }
+        hres = InitPropVariantFromString(app_id, &pv);
+        if (FAILED(hres)) {
+            PyErr_Format(PyExc_OSError,
+                           "InitPropVariantFromString() error 0x%x", hres);
+            goto error;
+        }
+        PyMem_Free(app_id);
+        pPropertyStore->SetValue(PKEY_AppUserModel_ID, pv);
+        pPropertyStore->Commit();
+        PropVariantClear(&pv);
+        pPropertyStore->Release();
     }
 
     hres = pPersistFile->Save(filename, TRUE);
     if (FAILED(hres)) {
-        PyObject *fn = PyUnicode_FromUnicode(filename, wcslen(filename));
+        PyObject *fn = PyUnicode_FromWideChar(filename, wcslen(filename));
         if (fn) {
             PyObject *msg = PyUnicode_FromFormat(
                         "Failed to create shortcut '%U' - error 0x%x",
@@ -135,6 +198,10 @@ static PyObject *CreateShortcut(PyObject *self, PyObject *args)
     pPersistFile->Release();
     pShellLink->Release();
 
+    PyMem_Free(path);
+    PyMem_Free(description);
+    PyMem_Free(filename);
+
     CoUninitialize();
     Py_RETURN_NONE;
 
@@ -145,6 +212,19 @@ static PyObject *CreateShortcut(PyObject *self, PyObject *args)
     if (pShellLink) {
         pShellLink->Release();
     }
+    if (pPropertyStore) {
+        pPropertyStore->Release();
+    }
+
+    if (path) {
+        PyMem_Free(path);
+    }
+    if (description) {
+        PyMem_Free(description);
+    }
+    if (filename) {
+        PyMem_Free(filename);
+    }
 
     CoUninitialize();
     return NULL;
@@ -154,7 +234,7 @@ PyMethodDef meth[] = {
     {"create_shortcut", CreateShortcut, METH_VARARGS,
         "winshortcut.create_shortcut(path, description, filename,\n"
         "                  arguments=u\"\", workdir=None, iconpath=None,\n"
-        "                  iconindex=0)\n"
+        "                  iconindex=0, app_id=None)\n"
         "\n"
         "  Creates a shortcut ``filename`` (a .lnk file), whose\n"
         "  target path is ``path``. All the input strings must be\n"
